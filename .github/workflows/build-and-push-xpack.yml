name: build-and-push-xpack

on:
  workflow_dispatch:
    inputs:
      dockerImageTag:
        description: 'Docker Image Tag'
        required: true
        default: 'v1.0.0-dev'
      architecture:
        description: 'Target Architecture'
        required: true
        default: 'linux/amd64'
        type: choice
        options:
          - linux/amd64
          - linux/arm64
          - linux/amd64,linux/arm64

jobs:
  build-and-update:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: 设置 Java 环境（根据工程所需的版本）
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # Step 3: 缓存 Maven 依赖（可选，提升速度）
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Delete CRM JAR from local Maven repo
        run: |
          rm -rf ~/.m2/repository/io/cordys

      # **新增加的步骤**
      # Step 4.1: 检出 `cordys-crm` 仓库代码
      - name: Checkout specific repository
        uses: actions/checkout@v3
        with:
          repository: cordys-dev/cordys-crm-xpack
          token: ${{ secrets.GH_TOKEN }}

      # Step 4.2: 切换到 `cordys-crm` 目录，确保正确获取文件
      - name: Change to cordys-crm-xpack directory
        run: ls -la

      # Step 5: 编译工程 JAR 包
      - name: Build JAR
        run: |
          ./mvnw clean package -DskipTests

      # Step 6: 获取生成的 JAR 文件名
      - name: Get JAR file version
        run: |
          JAR_FILE=$(ls target/*.jar | head -n 1)
          JAR_VERSION=$(basename $JAR_FILE | sed 's/.*-\([0-9][^/]*\)\.jar/\1/')
          echo "JAR_VERSION=${JAR_VERSION}" >> $GITHUB_ENV
          echo "JAR_FILE=${JAR_FILE}" >> $GITHUB_ENV

      # Step 7: 登录 Docker Registry（私有镜像需要）
      - name: Login to FIT2CLOUD Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}
          username: ${{ secrets.FIT2CLOUD_REGISTRY_USERNAME }}
          password: ${{ secrets.FIT2CLOUD_REGISTRY_PASSWORD }}

      # Step 8: 拉取基础镜像
      - name: Pull Docker Image
        run: |
          docker pull ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ce:${{ github.event.inputs.dockerImageTag }}

      # Step 9: 创建一个临时容器
      - name: Create a container from the image
        run: |
          docker create --name temp-container ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ce:${{ github.event.inputs.dockerImageTag }}

      # Step 10: 将编译好的 JAR 文件复制到容器中
      - name: Copy JAR to container
        run: |
          docker cp ${{ env.JAR_FILE }} temp-container:/app/lib/cordys-crm-xpack-${{ env.JAR_VERSION }}.jar

      # Step 11: 提交容器为新的镜像
      - name: Commit the updated container to a new image
        run: |
          docker commit temp-container ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ee:${{ github.event.inputs.dockerImageTag }}

      # Step 12: 推送新的镜像到指定位置
      - name: Push updated Docker Image
        run: |
          docker push ${{ secrets.FIT2CLOUD_REGISTRY_HOST }}/cordys/cordys-crm-ee:${{ github.event.inputs.dockerImageTag }}

      # Step 13: 清理临时容器
      - name: Remove temporary container
        run: |
          docker rm temp-container

        # 创建或更新标签
      - name: Create or Re-create Tag
        if: success()
        run: |
          git config --global user.name 'fit2-zhao'
          git config --global user.email 'yong.zhao@fit2cloud.com'
          
          # 获取远程标签信息
          git fetch --prune --tags
          
          # 检查标签是否存在（本地或远程）
          if git ls-remote --tags origin refs/tags/${{ github.event.inputs.dockerImageTag }} | grep -q "${{ github.event.inputs.dockerImageTag }}" || git tag -l "${{ github.event.inputs.dockerImageTag }}" | grep -q "${{ github.event.inputs.dockerImageTag }}"; then
            echo "标签 ${{ github.event.inputs.dockerImageTag }} 已存在，正在删除..."
          
            # 删除本地标签（如果存在）
            git tag -d ${{ github.event.inputs.dockerImageTag }} || true
          
            # 删除远程标签并确认结果
            git push --delete origin ${{ github.event.inputs.dockerImageTag }} || echo "远程标签可能不存在或已被删除"
          
            # 确认标签已被删除
            sleep 2
            git fetch --prune --tags
          fi
          
          # 创建和推送新标签
          git tag -a ${{ github.event.inputs.dockerImageTag }} -m "Release ${{ github.event.inputs.dockerImageTag }}"
          git push origin ${{ github.event.inputs.dockerImageTag }}