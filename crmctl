#!/bin/bash
  # ============================================================
  # CORDYS 控制脚本 (crmctl.sh)
  # 用于管理 CORDYS 服务的启动、停止、重启、升级和卸载
  # ============================================================

  action=$1        # 第一个参数：操作命令
  target=$2        # 第二个参数：目标服务或版本号（可选）
  args=$@          # 所有参数，用于转发给 docker-compose

  # 加载用户自定义配置，忽略报错
  source ~/.cordysrc >/dev/null 2>&1
  # 设置基础路径，默认为 /opt
  CORDYS_BASE=${CORDYS_BASE:-/opt}
  # 安装配置文件路径
  INSTALL_CONF="${CORDYS_BASE}/cordys/install.conf"
  # 读取现有的 docker-compose 文件列表
  COMPOSE_FILES=$(cat ${CORDYS_BASE}/cordys/compose_files 2>/dev/null || echo "")
  # 增加 docker-compose HTTP 超时时间
  export COMPOSE_HTTP_TIMEOUT=180

  # 日志函数
  log() {
    echo "[`date '+%Y-%m-%d %H:%M:%S'`] $1"
  }

  # 错误处理函数
  error_exit() {
    log "错误: $1"
    exit 1
  }

  # 检查配置文件是否存在
  [ -f "$INSTALL_CONF" ] || error_exit "安装配置文件不存在: $INSTALL_CONF"
  source "$INSTALL_CONF"

  # 打印使用说明
  function usage() {
    echo "CORDYS 控制脚本"
    echo
    echo "Usage: ./crmctl.sh [COMMAND] [ARGS...]"
    echo
    echo "Commands:"
    echo "  status    查看 CORDYS 服务运行状态"
    echo "  start     启动 CORDYS 服务"
    echo "  stop      停止 CORDYS 服务"
    echo "  restart   重启 CORDYS 服务"
    echo "  reload    重新加载 CORDYS 服务"
    echo "  upgrade   升级 CORDYS 至最新版本"
    echo "  upgrade [RELEASE]  根据指定版本离线升级"
    echo "  uninstall 卸载 CORDYS 服务"
    echo "  version   查看 CORDYS 版本"
  }

  # 统一执行 docker-compose 命令
  docker_compose() {
    cd ${CORDYS_BASE}/cordys || error_exit "无法进入目录: ${CORDYS_BASE}/cordys"
    docker-compose ${COMPOSE_FILES} "$@" || error_exit "docker-compose 执行失败: $*"
  }

  # 根据安装模式和外部依赖生成 compose 文件列表
  function generate_compose_files() {
    compose_files="-f docker-compose-base.yml"
    mkdir -p ${CORDYS_BASE}/cordys/logs/cordys-crm

    case ${CORDYS_INSTALL_MODE} in
      allinone|server)
        compose_files+=" -f docker-compose-cordys.yml"
        ;;
      *)
        error_exit "不支持的安装模式: ${CORDYS_INSTALL_MODE}"
        ;;
    esac

    if [ "${CORDYS_INSTALL_MODE}" != "server" ]; then
      # 内置 MySQL
      if [ "${CORDYS_EXTERNAL_MYSQL}" = "false" ]; then
        mkdir -p ${CORDYS_BASE}/cordys/data/mysql
        chmod 655 ${CORDYS_BASE}/cordys/conf/my.cnf
        compose_files+=" -f docker-compose-mysql.yml"
      fi
      # 内置 Redis
      if [ "${CORDYS_EXTERNAL_REDIS}" = "false" ]; then
        mkdir -p ${CORDYS_BASE}/cordys/data/redis
        compose_files+=" -f docker-compose-redis.yml"
      fi
    fi

    echo ${compose_files} >${CORDYS_BASE}/cordys/compose_files
    chmod -R 777 ${CORDYS_BASE}/cordys/logs/cordys-crm
    chmod -R +rw ${CORDYS_BASE}/cordys/conf ${CORDYS_BASE}/cordys/*.yml
    COMPOSE_FILES=${compose_files}
  }

  # 下载在线安装包，尝试多个镜像源和重试机制
  function download() {
    git_urls=("github.com" "hub.fastgit.org" "ghproxy.com/https://github.com")
    for url in "${git_urls[@]}"; do
      ok=true
      for i in {1..3}; do
        echo -n "检测 ${url} ... ${i} "
        curl -sI -m 5 https://${url} &>/dev/null || { echo failed; ok=false; break; }
        echo ok
      done
      $ok && server_url=$url && break
    done
    [ -z "${server_url}" ] && error_exit "无可用下载服务器"
    log "使用下载服务器 ${server_url}"
    cd /tmp
    wget -q --timeout=60 https://${server_url}/cordys-dev/cordys-crm/releases/download/${CORDYS_LATEST_VERSION}/cordys-ce-online-installer-${CORDYS_LATEST_VERSION}.tar.gz -O cordys-install.tar.gz || error_exit "下载失败"
  }

  # 各命令实现：status、start、stop、restart、reload、uninstall、version
  function status() { docker_compose ps; }
  function start()  { docker_compose start ${target}; }
  function stop()   { docker_compose stop  ${target}; }
  function restart(){ stop; start; }
  function reload() { docker_compose up -d --remove-orphans; }
  function uninstall(){
    docker_compose down ${target}
    rm -f ~/.cordysrc /usr/local/bin/crmctl
    log "CORDYS 已卸载"
  }
  function version(){ cat ${CORDYS_BASE}/cordys/version; }

  # 升级函数：通过 GitHub API 获取最新版本，支持在线与离线模式
  function upgrade() {
    curl -s https://api.github.com/repos/cordys-dev/cordys-crm/releases &>/dev/null || error_exit "无法访问 GitHub API"
    CORDYS_VERSION=$(cat ${CORDYS_BASE}/cordys/version)
    log "当前版本: ${CORDYS_VERSION}"

    # 判断是否 LTS 并设定正则
    [[ ${CORDYS_VERSION} == v1.* ]] || pattern='^v[0-9]+\.'

    get_releases(){
      releases=$(curl -s "https://api.github.com/repos/cordys-dev/cordys-crm/releases?page=$1" | grep -o '"name": "v[^"]*' | cut -d ' ' -f2)
      for r in ${releases}; do [[ $r =~ ${pattern} ]] && echo $r && return; done
    }

    for page in {1..10}; do
      latest=$(get_releases $page)
      [ -n "$latest" ] && break
    done
    CORDYS_LATEST_VERSION=$latest
    [ "$CORDYS_LATEST_VERSION" = "$CORDYS_VERSION" ] && { log "已是最新版"; exit 0; }
    log "检测到新版本: ${CORDYS_LATEST_VERSION}"

    # 下载并安装
    download || return
    tar xzf cordys-install.tar.gz && cd cordys-ce-online-installer-* && bash install.sh
    rm -rf cordys-ce-online-installer-*
  }

  # 主入口：分发命令
  main(){
    case "$action" in
      status|start|stop|restart|reload|upgrade|uninstall|version)
        $action;;
      help|--help) usage;;
      *) docker_compose $args;;
    esac
  }
  main